# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chord.protos.chord_pb2 as chord__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chord_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChordServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindSucc = channel.unary_unary(
                '/ChordService/FindSucc',
                request_serializer=chord__pb2.IdMessage.SerializeToString,
                response_deserializer=chord__pb2.IpMessage.FromString,
                _registered_method=True)
        self.FindPred = channel.unary_unary(
                '/ChordService/FindPred',
                request_serializer=chord__pb2.IdMessage.SerializeToString,
                response_deserializer=chord__pb2.IpMessage.FromString,
                _registered_method=True)
        self.GetSucc = channel.unary_unary(
                '/ChordService/GetSucc',
                request_serializer=chord__pb2.EmptyMessage.SerializeToString,
                response_deserializer=chord__pb2.IpMessage.FromString,
                _registered_method=True)
        self.GetPred = channel.unary_unary(
                '/ChordService/GetPred',
                request_serializer=chord__pb2.EmptyMessage.SerializeToString,
                response_deserializer=chord__pb2.IpMessage.FromString,
                _registered_method=True)
        self.UpdatePred = channel.unary_unary(
                '/ChordService/UpdatePred',
                request_serializer=chord__pb2.IpMessage.SerializeToString,
                response_deserializer=chord__pb2.EmptyMessage.FromString,
                _registered_method=True)
        self.UpdateSucc = channel.unary_unary(
                '/ChordService/UpdateSucc',
                request_serializer=chord__pb2.IpMessage.SerializeToString,
                response_deserializer=chord__pb2.EmptyMessage.FromString,
                _registered_method=True)
        self.NotAlone = channel.unary_unary(
                '/ChordService/NotAlone',
                request_serializer=chord__pb2.IpMessage.SerializeToString,
                response_deserializer=chord__pb2.EmptyMessage.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/ChordService/Ping',
                request_serializer=chord__pb2.EmptyMessage.SerializeToString,
                response_deserializer=chord__pb2.StatusMessage.FromString,
                _registered_method=True)


class ChordServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPred(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPred(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePred(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotAlone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChordServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSucc,
                    request_deserializer=chord__pb2.IdMessage.FromString,
                    response_serializer=chord__pb2.IpMessage.SerializeToString,
            ),
            'FindPred': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPred,
                    request_deserializer=chord__pb2.IdMessage.FromString,
                    response_serializer=chord__pb2.IpMessage.SerializeToString,
            ),
            'GetSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSucc,
                    request_deserializer=chord__pb2.EmptyMessage.FromString,
                    response_serializer=chord__pb2.IpMessage.SerializeToString,
            ),
            'GetPred': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPred,
                    request_deserializer=chord__pb2.EmptyMessage.FromString,
                    response_serializer=chord__pb2.IpMessage.SerializeToString,
            ),
            'UpdatePred': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePred,
                    request_deserializer=chord__pb2.IpMessage.FromString,
                    response_serializer=chord__pb2.EmptyMessage.SerializeToString,
            ),
            'UpdateSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSucc,
                    request_deserializer=chord__pb2.IpMessage.FromString,
                    response_serializer=chord__pb2.EmptyMessage.SerializeToString,
            ),
            'NotAlone': grpc.unary_unary_rpc_method_handler(
                    servicer.NotAlone,
                    request_deserializer=chord__pb2.IpMessage.FromString,
                    response_serializer=chord__pb2.EmptyMessage.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=chord__pb2.EmptyMessage.FromString,
                    response_serializer=chord__pb2.StatusMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChordService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ChordService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChordService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/FindSucc',
            chord__pb2.IdMessage.SerializeToString,
            chord__pb2.IpMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindPred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/FindPred',
            chord__pb2.IdMessage.SerializeToString,
            chord__pb2.IpMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/GetSucc',
            chord__pb2.EmptyMessage.SerializeToString,
            chord__pb2.IpMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/GetPred',
            chord__pb2.EmptyMessage.SerializeToString,
            chord__pb2.IpMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/UpdatePred',
            chord__pb2.IpMessage.SerializeToString,
            chord__pb2.EmptyMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/UpdateSucc',
            chord__pb2.IpMessage.SerializeToString,
            chord__pb2.EmptyMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotAlone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/NotAlone',
            chord__pb2.IpMessage.SerializeToString,
            chord__pb2.EmptyMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChordService/Ping',
            chord__pb2.EmptyMessage.SerializeToString,
            chord__pb2.StatusMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
